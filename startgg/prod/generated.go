// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package startggprod

import (
	"context"

	"github.com/AaronLieb/octagon/startgg"
	"github.com/Khan/genqlient/graphql"
)

// GetTournamentResponse is returned by GetTournament on success.
type GetTournamentResponse struct {
	// Returns a tournament given its id or slug
	Tournament GetTournamentTournament `json:"tournament"`
}

// GetTournament returns GetTournamentResponse.Tournament, and is useful for accessing the field via an interface.
func (v *GetTournamentResponse) GetTournament() GetTournamentTournament { return v.Tournament }

// GetTournamentTournament includes the requested fields of the GraphQL type Tournament.
// The GraphQL type's documentation follows.
//
// A tournament
type GetTournamentTournament struct {
	Id int `json:"id"`
}

// GetId returns GetTournamentTournament.Id, and is useful for accessing the field via an interface.
func (v *GetTournamentTournament) GetId() int { return v.Id }

// __GetTournamentInput is used internally by genqlient
type __GetTournamentInput struct {
	Slug string `json:"slug"`
}

// GetSlug returns __GetTournamentInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetTournamentInput) GetSlug() string { return v.Slug }

// The query executed by GetTournament.
const GetTournament_Operation = `
query GetTournament ($slug: String) {
	tournament(slug: $slug) {
		id
	}
}
`

func GetTournament(
	ctx_ context.Context,
	slug string,
) (data_ *GetTournamentResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTournament",
		Query:  GetTournament_Operation,
		Variables: &__GetTournamentInput{
			Slug: slug,
		},
	}
	var client_ graphql.Client

	client_, err_ = startgg.GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &GetTournamentResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
